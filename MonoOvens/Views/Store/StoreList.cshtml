<!-- model IEnumerable<MonoOvens.Models.StoreMaster>

{
    ViewData["Title"] = "StoreList";
}

<h2>Stores</h2>

<p>
    <a asp-action="CreateStore">Create New</a>
</p>
<table style="width:100%!important" class="table  table-bordered" id="StoresTable">
    <thead>
        <tr>
            <th>
                Id
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.ImporterName)*@ Importer Name
            </th>
            <th>
                Dealer Name
            </th>
            <th>
                Store Group Name
            </th>
            <th>
                Customer Name
            </th>
            <th>
                Customer Phone
            </th>
            <th>
                Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                Html.DisplayNameFor(model => model.Region)
            </th>
            <th>
                Html.DisplayNameFor(model => model.Area)
            </th>
            <th>
                Store Code
            </th>
            <th>
                Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                Store Name
            </th>
            <th>
                Store Address
            </th>

            <th></th>
        </tr>
    </thead>
    @*<tbody>
            @foreach (var item in Model)
            {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ImporterName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DealerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StoreGroupName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CustomerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CustomerPhone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Region)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Area)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StoreCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StoreName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StoreAddress1)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StoreAddress2)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PostTown)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StorePostCode)
                </td>
                <td>
                    <a asp-action="EditStore" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
            }
        </tbody>*@
</table>
section Scripts{

    <script language="javascript" type="text/javascript">
        var StoresTable;
        function EditStorebyAdmin(id) {

            window.location.href = "/Store/EdiStore/" + id;
        }
        function confirmDelete(callback) {
            bootbox.confirm({
                message: "<h3>Are you sure, You want to Delete this record...!!</h3>",
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) callback();
                }
            });

        }


        function deleteSelectedItem(id) {

            confirmDelete(function () {

                //var data = customersTable.rows({ selected: true }).data();
                $.ajax({
                    type: "GET",
                    url: "/Store/Delete",
                    data: { id: id },
                    success: function (data) {

                        assetsTable.draw(true);
                        // toggleActionButtons(false);
                        //  document.location.reload(true);
                    }

                }).fail(function (error) {
                 //   alert(error.statusText);
                    console.log(error);
                })
            });

        }

        $(document).ready(function () {
            //toggleActionButtons(false);

            StoresTable = $('#StoresTable').DataTable({
                select: {
                    style: 'single'
                },
                //"order": [[3, "desc"]],
                "ordering": true, searching: true,                                   // make ordering false to getting the last out put as first.
                responsive: true, "bProcessing": true,
                "ServerSide": true,                                                   // paging
                "sAjaxSource": '/Store/StoreAjaxDataProvider',
                "columnDefs": [
                    {
                        "targets": [0],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "render": function (data, type, row) {
                            //return '<a class="btn btn-primary btn-link"   id="' + data.id + '" data-toggle="tooltip" title="" data-original-title="Edit Detail" onclick="EditStorebyAdmin(`' + data.id + '`)">Edit</a> | <a class="btn btn-danger btn-link"   id="' + data.id + '" data-toggle="tooltip" title="" data-original-title="View Detail" onclick="deleteSelectedItem(' + data.id + ')">Delete</a>'
                            return '<a href="/Store/EditStore/' + data.id + '"  >Edit</a> |  <a id="' + data.id + '" onclick="deleteSelectedItem(' + data.id + ')">Delete</a>'
                        },
                        "targets": 13
                    }
                ],
                "columns": [
                    { "data": "id" },
                    { "data": "importerName" },
                    { "data": "dealerName" },
                    { "data": "storeGroupName" },
                    { "data": "customerName" },
                    { "data": "customerPhone" },
                    { "data": "email" },
                    { "data": "region" },
                    { "data": "area" },
                    { "data": "storeCode" },
                    { "data": "type" },
                    { "data": "storeName" },
                    {
                        "data": "StoreAddress1",
                        "render": function (row,data) {

                        }
                    },
                    //{ "data": "StoreAddress2" },
                    //{ "data": "postTown" },
                    //{ "data": "storePostcode" },
                    {
                        "orderable": false,
                        "searchable": false,
                        "data": null
                    }
                ]
            });
            $('#StoresTable tbody').on('click', 'tr', function () {
                setTimeout(function () {
                    var selectedCount = StoresTable.rows({ selected: true }).count();
                    // toggleActionButtons(selectedCount > 0);
                }, 100)
            });
        });
    </script>
}-->
@model IEnumerable<MonoOvens.Models.StoreMaster>

@{
    ViewData["Title"] = "Stores List";
}

<h2>Stores</h2>

<p>
    <a asp-action="CreateStore">Create New</a>
</p>
<table style="width:100%!important" class="table  table-bordered" id="storesTable">
    <thead>
    <th>
        Id
    </th>
    <th>
        @*@Html.DisplayNameFor(model => model.ImporterName)*@ Importer Name
    </th>
    <th>
        Dealer Name
    </th>
    <th>
        Store Group Name
    </th>    
    <th>
        Store Code
    </th>
    <th>
        @Html.DisplayNameFor(model => model.Type)
    </th>
    <th>
        Store Name
    </th>
    <th>
        Store Address
    </th>
    <th>
        Store Phone
    </th>
    <th>
        Store Contact
    </th>
    <th>
        Zone
    </th>
    <th>
        Area
    </th>
    <th>
        Region
    </th>
    <th></th>
    </tr>
    </thead>

</table>

@section Scripts{

    <script language="javascript" type="text/javascript">
        var storesTable;

        function EditbyAdmin(id) {

            window.location.href = "/Store/EditStore/" + id;
        }

        function confirmDelete(callback) {
            bootbox.confirm({
                message: "<h3>Are you sure, You want to delete this record...!!</h3>",
                buttons: {
                    confirm: {
                        label: 'Yes',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'No',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) callback();
                }
            });

        }

        function deleteSelectedItem(Id) {

            confirmDelete(function () {

                //var data = customersTable.rows({ selected: true }).data();
                $.ajax({
                    type: "GET",
                    url: "/Store/Delete",
                    data: { Id: Id },
                    success: function (data) {

                        storesTable.draw(true);
                        // toggleActionButtons(false);
                        //  document.location.reload(true);
                    }

                }).fail(function (error) {
                    // alert(error.statusText);
                    console.log(error);
                })
            });

        }

        $(document).ready(function () {
            //toggleActionButtons(false);

            storesTable = $('#storesTable').DataTable({
                select: {
                    style: 'single'
                },
                //"order": [[3, "desc"]],
                "ordering": true, searching: true,                                   // make ordering false to getting the last out put as first.
                responsive: true, "bProcessing": true,
                "bServerSide": true,                                                   // paging
                "sAjaxSource": '/Store/StoreAjaxDataProvider',
                "columnDefs": [
                    {
                        "targets": [0],
                        "visible": false,
                        "searchable": false
                    },
                    {
                        "render": function (data, type, row) {
                            return '<a class="btn btn-primary btn-link"   id="' + data.id + '" data-toggle="tooltip" title="" data-original-title="Edit Detail" onclick="EditbyAdmin(`' + data.id + '`)">Edit</a> | <a class="btn btn-danger btn-link"   id="' + data.id + '" data-toggle="tooltip" title="" data-original-title="View Detail" onclick="deleteSelectedItem(`' + data.id + '`)">Delete</a>'
                        },
                        "targets": 13
                    }
                ],
                "columns": [
                    { "data": "id" },
                    { "data": "impName" },
                    { "data": "dlrName" },
                    { "data": "stgpName" },
                    { "data": "storeCode" },
                    { "data": "type" },
                    { "data": "storeName" },
                     {
                        "data": "storeAddress",
                        "render": function (data, type, row) {
                    return row.storeAddress1 + '&nbsp;' + row.storeAddress2  + '&nbsp;' + row.postTown + '&nbsp;' +row.storePostcode
                        }
                    },    
                    { "data": "storePhone" },
                    { "data": "storeContact" },
                    { "data": "zone" },
                    { "data": "area" },
                    { "data": "region" },                                                       
                    {
                        "orderable": false,
                        "searchable": false,
                        "data": null
                    }
                ]

            });
            $('#storesTable tbody').on('click', 'tr', function () {
                setTimeout(function () {
                    var selectedCount = storesTable.rows({ selected: true }).count();
                    // toggleActionButtons(selectedCount > 0);
                }, 100)
            });
        });
    </script>
}